<?php
# Copyright Â©2017 - Aaron Crawford, N3MBH - info(at)openrepeater(dot)com
# Licended under GPL v2 or later

/*
This script reads settings from the OpenRepeater database and builds new configuration
files for SVXLink. It currently builds the following configuration files:
- svxlink.conf
- ModuleEchoLink.conf
- local TCL overrides
- gpio.conf
*/

/* ---------------------------------------------------------- */
/* SESSION CHECK TO SEE IF USER IS LOGGED IN. */
session_start();
if ((!isset($_SESSION['username'])) || (!isset($_SESSION['userID']))){
	header('location: login.php');
} else { // If they are, show the page.
/* ---------------------------------------------------------- */

// Generate header warning message for top of ALL files output by this script
$orpFileHeader = '
###############################################################################
#
#  OPENREPEATER / SVXLINK CONFIGURATION FILE
#  This file was auto generated by OpenRepeater. 
#  DO NOT MAKE CHANGES IN THIS FILE AS THEY WILL BE OVERWRITTEN
#
###############################################################################
';

// Get Settings from SQLite
include_once("../includes/get_settings.php");

// Get Modules from SQLite
include_once("../includes/get_modules.php");

// Get Port Settings from SQLite
include_once("../includes/get_ports.php");

// Get GPIOs from SQLite that need to be set for OS (/sys/class/gpio/)
include_once("../includes/get_gpios.php");

/* ---------------------------------------------------------- */
/* SVXLINK CONFIGURATION SETTINGS */

// Functions
function built_rx($curPort, $portsArray) {
	$audio_dev = explode("|", $portsArray[$curPort]['rxAudioDev']);
	
	$rx_section = '###############################################################################
	# Receive Port: "' . trim($portsArray[$curPort]['portLabel']) . '"
	###############################################################################
	[Rx'.$curPort.']
	TYPE=Local
	AUDIO_DEV='.$audio_dev[0].'
	AUDIO_CHANNEL='.$audio_dev[1].'
	';

	if (strtolower($portsArray[$curPort]['rxMode']) == 'vox') {
	$rx_section .= '
		# VOX Squelch Mode
		SQL_DET=VOX
		VOX_FILTER_DEPTH=150
		VOX_THRESH=300
		SQL_HANGTIME=1000
		';
	} else {
	$rx_section .= '
		# COS Squelch Mode
		SQL_DET=GPIO
		GPIO_SQL_PIN=gpio'.$portsArray[$curPort]['rxGPIO'].'
		SQL_HANGTIME=10
		';
	}

	$rx_section .= '
	SQL_START_DELAY=1
	SQL_DELAY=10
	SIGLEV_SLOPE=1
	SIGLEV_OFFSET=0
	SIGLEV_OPEN_THRESH=30
	SIGLEV_CLOSE_THRESH=10
	DEEMPHASIS=1
	PEAK_METER=0
	DTMF_DEC_TYPE=INTERNAL
	DTMF_MUTING=1
	DTMF_HANGTIME=100
	DTMF_SERIAL=/dev/ttyS0

	';
	return $rx_section;
}

function built_tx($curPort, $portsArray, $settingsArray) {
	$audio_dev = explode("|", $portsArray[$curPort]['txAudioDev']);

	$tx_section = '###############################################################################
	# Transmit Port: "' . trim($portsArray[$curPort]['portLabel']) . '"
	###############################################################################
	[Tx'.$curPort.']
	TYPE=Local
	AUDIO_DEV='.$audio_dev[0].'
	AUDIO_CHANNEL='.$audio_dev[1].'

	PTT_TYPE=GPIO
	PTT_PORT=GPIO
	PTT_PIN=gpio'.$portsArray[$curPort]['txGPIO'].'
	PTT_HANGTIME='.($settingsArray['txTailValueSec'] * 1000).'

	TIMEOUT=300
	TX_DELAY=500
	';

	if ($settingsArray['txTone']) {
		$tx_section .= '
		CTCSS_FQ='.$settingsArray['txTone'].'
		CTCSS_LEVEL=9
		';
	}

	$tx_section .= '
	PREEMPHASIS=0
	DTMF_TONE_LENGTH=100
	DTMF_TONE_SPACING=50
	DTMF_TONE_PWR=-18

	';
	return $tx_section;
}

/* ---------------------------------------------------------- */
/* --- BUILD MODULE SETTINGS --- */

	$modulesArray = array();
	foreach($module as $cur_mod) { 
		if ($cur_mod['moduleEnabled']==1) {
			
			// Add Module name to array to output list in logic section
			$modulesArray[] = 'Module'.$cur_mod['svxlinkName'];

			
			// Build Module Configuration
			$mod_build_file = '../modules/'.$cur_mod['svxlinkName'].'/build_config.php';
			if (file_exists($mod_build_file)) {
				// Module has a build file...use it.
				include($mod_build_file);

			} else {
				// Module doesn't have a build file so create minimal configuration
				$module_config_output = "
				[Module".$cur_mod['svxlinkName']."]
				NAME=".$cur_mod['svxlinkName']."
				ID=".$cur_mod['svxlinkID']."
				TIMEOUT=60
				";							
			}
			
			// Clean up tabs/white spaces
			$module_config_output = preg_replace('/\t+/', '', $module_config_output);

			// Write out Module Config File for SVXLink
			file_put_contents('/etc/openrepeater/svxlink/svxlink.d/Module'.$cur_mod['svxlinkName'].'.conf', $orpFileHeader . $module_config_output);

		} 
	}
	
	// Build Module List from Array
	if(!empty($modulesArray)) {
		$modulesList = 'MODULES=' . implode(",", $modulesArray);
	} else {
		$modulesList = '#MODULES=NONE';
	}

/* ---------------------------------------------------------- */
/* --- PORT SETTINGS - Generates RX & TX sections for each port --- */

$svx_ports = '';

foreach ($ports as $key => $val) {
	$svx_ports .= built_rx($key, $ports);
	$svx_ports .= built_tx($key, $ports, $settings);
}

// Note that while this section can build multipe TX & RX sections from ports table, there is no utilization of this feature yet in other logic.

/* ---------------------------------------------------------- */
/* --- LOGIC SETTINGS --- */

switch ($settings['orp_Mode']) {
    case "repeater":
		include('svxlink_update_functions/main_repeater_logic.php');
        break;
    case "simplex":
		include('svxlink_update_functions/main_simplex_logic.php');
        break;
}

include('svxlink_update_functions/main_link_logic.php');
$svx_logic .= $svx_link_logic; // Append link logic to repeater logic


/* --- GLOBAL SETTINGS --- */

	switch ($settings['orp_Mode']) {
	    case "repeater":
			$useLogic = 'RepeaterLogic';
	        break;
	    case "simplex":
			$useLogic = 'SimplexLogic';
	        break;
	}

	// If there are Link Sections, append to included logics
	if ($logicsArrayLinks) {
		$useLogic .= ",".implode(",", $logicsArrayLinks);		
	}


	$svx_global = '[GLOBAL]
	MODULE_PATH=/usr/lib/arm-linux-gnueabihf/svxlink
	LOGICS='.$useLogic.'
	CFG_DIR=svxlink.d
	TIMESTAMP_FORMAT="%c"
	CARD_SAMPLE_RATE=16000
	#LOCATION_INFO=LocationInfo
	#LINKS=LinkToR4

	';


/* ---------------------------------------------------------- */
/* BUILD CUSTOM TCL OVERRIDES...ie COURTESY TONES, IDENTIFICATION, ETC */

// Define Strings Variables for TCL Namespaces. 
$tclLogicNameSpace = '';
$tclRepeaterLogicNameSpace = '';

// Include PHP files that build custom TCL Logic for the namespaces below
include('svxlink_update_functions/tcl_identification.php');
include('svxlink_update_functions/tcl_courtesy_tones.php');
include('svxlink_update_functions/tcl_TEMP.php');

// TCL Logic Namespace Override
$tclOverride = '
### Overridden Core Logic event handlers created by OpenRepeater
namespace eval Logic {
' . $tclLogicNameSpace . '
# end of namespace
}


### Overridden Repeater Logic event handlers created by OpenRepeater
namespace eval RepeaterLogic {
' . $tclRepeaterLogicNameSpace . '
# end of namespace
}

';

/*
namespace eval EchoLink {

		# Executed when an incoming connection is accepted
		proc remote_greeting {call} {
			playSilence 1000;
			playFile "/usr/share/svxlink/sounds/en_US/EchoLink/greeting.wav"
#			playMsg "greeting";
		}

 end of namespace
}
*/

/* ---------------------------------------------------------- */
/* WRITE GPIO CONFIGURATION FILE */

// Define GPIO pin arrays
$gpioInHighArray = array();
$gpioInLowArray = array();
$gpioOutHighArray = array();
$gpioOutLowArray = array();

// Loop through each GPIO in database and assign to appropriate arrays
foreach ($gpio as $key => $val) {	
	if ($gpio[$key]['direction'] == "in") {
		if ($gpio[$key]['active'] == "low") {
			$gpioInLowArray[] = $gpio[$key]['gpio_num'];		
		} else {
			$gpioInHighArray[] = $gpio[$key]['gpio_num'];					
		}
	}

	if ($gpio[$key]['direction'] == "out") {
		if ($gpio[$key]['active'] == "low") {
			$gpioOutLowArray[] = $gpio[$key]['gpio_num'];		
		} else {
			$gpioOutHighArray[] = $gpio[$key]['gpio_num'];					
		}
	}

}

// Reformat arrays into space delminated lists of gpio pin numbers
$gpioInHighString = implode(" ", $gpioInHighArray);
$gpioInLowString = implode(" ", $gpioInLowArray);
$gpioOutHighString = implode(" ", $gpioOutHighArray);
$gpioOutLowString = implode(" ", $gpioOutLowArray);

// Build File Contents
$gpioConfigFile = '
	# Configuration file for the SVXLink server GPIO Pins
	
	#Set what GPIO pins point IN and have an Active HIGH state (3.3v = ON, 0v = OFF)
	GPIO_IN_HIGH="'.$gpioInHighString.'"

	#Set what GPIO pins point IN and have an Active LOW state (0v = ON, 3.3v = OFF)
	GPIO_IN_LOW="'.$gpioInLowString.'"

	#Set what GPIO pins point OUT and have an Active HIGH state (3.3v = ON, 0v = OFF)
	GPIO_OUT_HIGH="'.$gpioOutHighString.'"

	#Set what GPIO pins point OUT and have an Active LOW state (0v = ON, 3.3v = OFF) 
	GPIO_OUT_LOW="'.$gpioOutLowString.'"
	
	# User that should own the GPIO device files
	GPIO_USER="svxlink"

	# Group for the GPIO device files
	GPIO_GROUP="svxlink"

	# File access mode for the GPIO device files
	GPIO_MODE="0664"
';	

// TODO: Need to add function to check existing GPIO pins in /sys/class/gpio 
// and see if new pins in ports table exist since system boot and if not add them.

#Clean up tabs/white spaces
$svx_global = preg_replace('/\t+/', '', $svx_global);
$svx_logic = preg_replace('/\t+/', '', $svx_logic);
$svx_ports = preg_replace('/\t+/', '', $svx_ports);
$gpioConfigFile = trim(preg_replace('/\t+/', '', $gpioConfigFile));

/* ---------------------------------------------------------- */
/* WRITE CONFIGURATION & TCL FILES */

file_put_contents('/etc/openrepeater/svxlink/svxlink.conf', $orpFileHeader . $svx_global . $svx_logic . $svx_ports);
file_put_contents('/etc/openrepeater/svxlink/local-events.d/CustomLogic.tcl', $orpFileHeader . $tclOverride);
file_put_contents('/etc/openrepeater/svxlink/gpio.conf', $orpFileHeader . $gpioConfigFile);

/* CLOSE DATABSE CONNECTION */
$dbConnection->close();

/* CLEAR SETTINGS UPDATE FLAG TO CLEAR BANNER AT TOP OF PAGE */
$memcache_obj = new Memcache;
$memcache_obj->connect('localhost', 11211);
$memcache_obj->set('update_settings_flag', 0, false, 0);

/* appply changes to the gpio.conf and restart the service */
$shellout = shell_exec('sudo /usr/sbin/orp_helper svxlink_gpio_setup restart');

/* apply changes to svxlink.conf and restart the service */
$shellout = shell_exec('sudo /usr/sbin/orp_helper svxlink restart');

/* WHAT PAGE TO GO BACK TO */
if ($_POST["return_url"]) {
	// Return to page that sent here
	$url = strtok($_POST["return_url"], '?'); //Clean parameters from URL
	header('location: '.$url);	
} else if (isset($_SESSION["new_repeater_settings"])) {
	// Wizard was run. Go ahead and destroy session and logout
	session_destroy();
	header('location: ../login.php');		
} else {
	// Otherwise just go to dashboard
#	header('location: ../dashboard.php');	
}	
?>

<?php
/* ---------------------------------------------------------- */
// SESSION CHECK TO SEE IF USER IS LOGGED IN.
 } // close ELSE to end login check from top of page
/* ---------------------------------------------------------- */
?>
