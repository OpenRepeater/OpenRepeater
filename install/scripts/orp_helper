#!/bin/bash
# Copyright Â©2017 OpenRepeater Project - Aaron Crawford, N3MBH & Richard Neese KB3VGW
# Licended under GPL v2 or later

# This is a helper script for OpenRepeater. This script is primarily intended
# to extend the functionality of the of the ORP web user interface and allow it
# to execute specific system commands that it would not normally be able to
# perform due to security reasons in Linux. DO NOT INCLUDE commands in this
# script that a potential hacker could utilize to compromise the system if the
# web server were to be compromised. This script should be a delicate balance
# between needed functionality in the web interface and security. 

# NOTE: NO NEED TO PREFIX COMMANDS WITH SUDO AS THIS SCRIPT IS INTENDED TO BE RUN AS ROOT USING SUDO COMMAND

####### WORK IN PROGRESS........

###############################################################################
# DEFINE FUNCTIONS
###############################################################################

### SVXLINK FUNCTIONS ###
function display_help {
	echo "OPEN REPEATER HELPER"
	echo "This is a helper script for OpenRepeater. This script is primarily intended"
	echo "to extend the functionality of the of the ORP web user interface and allow it"
	echo "to execute specific system commands that it would not normally be able to"
	echo "perform due to security reasons in Linux."
	echo ""
	echo "USAGE: orp_helper [service] [option]"
}

function svxlink_disable {
	echo "SVXLink Disable"
	service svxlink stop
	systemctl disable svxlink.service
}

function svxlink_enable {
	echo "SVXLink Enable"
	systemctl enable svxlink.service
	service svxlink start
}

function svxlink_restart {
	service svxlink restart
	svxlink_status
}

function svxlink_stop {
	service svxlink stop
	svxlink_status
}

function svxlink_start {
	service svxlink start
	svxlink_status
}

function svxlink_status {
	systemctl is-active svxlink
}

function svxserver_disable {
	echo "svxserver Disable"
	service svxserver stop
	systemctl disable svxserver.service
}

function svxserver_enable {
	echo "svxserver Enable"
	systemctl enable svxserver.service
	service svxserver start
}

function svxserver_restart {
	service svxserver restart
	svxserver_status
}

function svxserver_stop {
	service svxserver stop
	svxserver_status
}

function svxserver_start {
	service svxserver start
	svxserver_status
}

function svxserver_status {
	systemctl is-active svxserver
}

function remotetrx_disable {
	echo "remotetrx Disable"
	service remotetrx stop
	systemctl disable remotetrx.service
}

function remotetrx_enable {
	echo "remotetrx Enable"
	systemctl enable remotetrx.service
	service remotetrx start
}

function remotetrx_restart {
	service remotetrx restart
	remotetrx_status
}

function remotetrx_stop {
	service remotetrx stop
	remotetrx_status
}

function remotetrx_start {
	service remotetrx start
	remotetrx_status
}

function remotetrx_status {
	systemctl is-active remotetrx
}

function svxlink_gpio_setup_disable {
	echo "svxlink_gpio_setup Disable"
	service svxlink_gpio_setup stop
	systemctl disable svxlink_gpio_setup.service
}

function svxlink_gpio_setup_enable {
	echo "svxlink_gpio_setup Enable"
	systemctl enable svxlink_gpio_setup.service
	service svxlink_gpio_setup start
}

function svxlink_gpio_setup_restart {
	service svxlink_gpio_setup restart
	svxlink_gpio_setup_status
}

function svxlink_gpio_setup_stop {
	service svxlink_gpio_setup stop
	svxlink_gpio_setup_status
}

function svxlink_gpio_setup_start {
	service svxlink_gpio_setup start
	svxlink_gpio_setup_status
}

function svxlink_gpio_setup_status {
	systemctl is-active svxlink_gpio_setup
}

### SYSTEM FUNCTIONS ###
function system_reboot {
	shutdown -r now
}

function system_shutdown {
	shutdown -h now
}

function system_uptime {
	uptime
}

function system_user {
	whoami
}

### AUDIO FUNCTIONS ###
function audio_inputs {
	arecord -l
}

function audio_outputs {
	aplay -l
}

function audio_version {
	cat /proc/asound/version 2>&1
}

### NETWORK FUNCTIONS ###
function network_read {
	echo "Read Network Config for external parsing"
}

function network_write {
	echo "Write New Network Config"
}

### WEBSERVER FUNCTIONS ###
function www_stop {
	echo "Webserver / ORP GUI Stop"
	service nginx stop
}

function www_start {
	echo "Webserver / ORP GUI Start"
	service nginx start
}

function www_restart {
	echo "Webserver / ORP GUI Restart"
	service nginx restart
}

function www_disable {
	echo "Webserver / ORP GUI Disable"
	systemctl disable nginx
}

function www_enable {
	echo "Webserver / ORP GUI Enable"
	systemctl enable nginx
	service nginx restart
}


# TODO LIST
# Setting Timezone
# Expanding Filesystem


###############################################################################
# READ COMMAND LINE OPTIONS AND EXECUTE (Calls Functions Above)
###############################################################################

while :; do
    case $1 in
        svxlink)
			if [ "$2" == "start" ]; then svxlink_start
			elif [ "$2" == "stop" ]; then svxlink_stop
			elif [ "$2" == "restart" ]; then svxlink_restart
			elif [ "$2" == "status" ]; then svxlink_status
			elif [ "$2" == "enable" ]; then svxlink_enable
			elif [ "$2" == "disable" ]; then svxlink_disable
			else echo "INVALID OPTION"; echo "USAGE: orp_helper svxlink (start|stop|restart|status|enable|disable)"
			fi
			exit;;
        system)
			if [ "$2" == "stop" ]; then system_shutdown
			elif [ "$2" == "restart" ]; then system_reboot
			elif [ "$2" == "uptime" ]; then system_uptime
			elif [ "$2" == "user" ]; then system_user
			else echo "INVALID OPTION"; echo "USAGE: orp_helper system (stop|restart|uptime|user)"
			fi
			exit;;
        www)
			if [ "$2" == "stop" ]; then www_stop
			elif [ "$2" == "start" ]; then www_start
			elif [ "$2" == "restart" ]; then www_restart
			elif [ "$2" == "disable" ]; then www_disable
			elif [ "$2" == "enable" ]; then www_enable
			else echo "INVALID OPTION"; echo "USAGE: orp_helper www (stop|start|restart|disable|enable)"
			fi
			exit;;
        audio)
			if [ "$2" == "inputs" ]; then audio_inputs
			elif [ "$2" == "outputs" ]; then audio_outputs
			elif [ "$2" == "version" ]; then audio_version
			else echo "INVALID OPTION"; echo "USAGE: orp_helper audio (inputs|outputs|version)"
			fi
			exit;;
        network)
			if [ "$2" == "read" ]; then network_read
			elif [ "$2" == "write" ]; then network_write
			else echo "INVALID OPTION"; echo "USAGE: orp_helper network (read|write)"
			fi
			exit;;

        TEST)
			echo "Testing..."
			exit;;

        -h|-\?|--help|*)   # Display general help/info.
			display_help
			exit;;
    esac
done